/**
 * =====================================
 * ~jsonFindValue ( json ; keyOrIndex )
 *
 * PURPOSE:
 *		Find the starting position of a value.
 *
 * RETURNS:
 *		Boolean True if value is found, False if it isn't or if Error.
 *
 * PARAMETERS:
 *		json = the json string
 *		keyOrIndex = object property key (name) or array index (position)
 *
 * DEPENDENCIES:
 *		~jsonDiscardResult
 *		~jsonParseError
 *		~jsonParseWhitespace
 *		~jsonParseArrayFindValue
 *		z_jsonParseSupport2
 *
 * NOTES:
 *		used by jsonGet to return the value
 *		used by jsonModify to replace the value
 *		consider calling this something like "indexOf"
 *
 * HISTORY:
 *		CREATED on 2015-MAR-31 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

Let ( [
	~! = /* logging start disabled LogWriterMemoryCreateEntry (
		"~jsonFindValue start"
			& " [json:" & json & "]"
			& " [keyOrIndex:" & keyOrIndex & "]"
	) & disabled logging end */ "" ;
	
	/* initialize parsing variables */
	$~json.ch = " " ;
	$~json.at = 1 ;
	$~json.text = json ;
	$~json.error = ""
] ;
	~jsonParseWhitespace
	& Case (
		/* object */
		$~json.ch = "{" ;
		z_jsonParseSupport2 ( 221 /* ParseObjectFindValue */ ; keyOrIndex ; "" ; "" ; "" ) ;
		
		/* array */
		$~json.ch = "[" ;
		~jsonParseArrayFindValue ( keyOrIndex ) ;
		
		/* else: string, number, or word */
		False
		& ~jsonDiscardResult ( ~jsonParseError (
			"value sent to ~jsonFindValue function was a string, number, or word. An object or array was expected."
		) )
	)
	
	/* clean-up */
	& Let ( [
		/* save error to public variable */
		$json.error = $~json.error
		/* TODO: enable for production use
			actually, as currently implemented, this function can't clear these
			values because calling functions are using them.
			So, any function that calls this one needs to clear these values.
		; $~json.error = ""
		$~json.ch = "" ;
		$~json.at = 1 ;
		$~json.text = json
		*/
	] ;
		""
	)
)