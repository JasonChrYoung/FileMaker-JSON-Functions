/**
 * =====================================
 * ~jsonParseObjectFindEnd ( step )
 *
 * PURPOSE:
 *		Move pointer to the end of the object.
 *
 * RETURNS:
 *		Empty string.
 *		(can check $~json.error to see if an error occurred)
 *
 * PARAMETERS:
 *		step = always leave empty when calling this function
 *			(stores the current state of processing this recursive function is in)
 *
 * DEPENDENCIES:
 *		Pointer is expected to be at { starting the object.
 *		Custom Functions:
 *			~jsonParseObjectFindEnd		(self: it's recursive!)
 *			~jsonParseError
 *			~jsonParseNext
 *			~jsonParseWhitespace
 *			~jsonParseString
 *			~jsonParseValueSkip
 *
 * NOTES:
 *		Recursive and multiple instances of this function my be running at any
 *		given point in time, so $localVars cannot be used.
 *
 * HISTORY:
 *		CREATED on 2015-APR-02 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

Case (
	/**
	 ***************************************************************************
	 * STEP 0: SET-UP
	 ***************************************************************************
	 */
	not step ;
	Let ( [
		~! = /* logging start disabled LogWriterMemoryCreateEntry (
			"~jsonParseObjectFindEnd [step:0]"
		) & disabled logging end */ "" ;
		
		~! = If ( IsEmpty ( ~jsonParseNext ( "{" ) ) ;
			~jsonParseError ( "Pointer was not at start of an object" )
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		/* check if object is empty */
		~endFound = If ( IsEmpty ( $~json.error ) ;
			If ( $~json.ch = "}" ;
				True
					& ~jsonDiscardResult ( ~jsonParseNext ( "}" ) )
			)
		) ;
		
		~nextStep = If (
			not IsEmpty ( $~json.error )
				or ~endFound
			;
			2 ;	/* clean-up */
			1	/* main */
		)
	] ;
		~jsonParseObjectFindEnd ( ~nextStep )
	) ;
	
	
	/**
	 ***************************************************************************
	 * STEP 1: MAIN
	 ***************************************************************************
	 */
	step = 1 ;
	Let ( [
		~! = /* logging start disabled LogWriterMemoryCreateEntry (
			"~jsonParseObjectFindEnd [step:1]"
		) & disabled logging end */ "" ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseString
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseNext ( ":" )
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseValueSkip
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		/* check if at end of object */
		~endFound = If ( IsEmpty ( $~json.error ) ;
			If ( $~json.ch = "}" ;
				True
					& ~jsonDiscardResult ( ~jsonParseNext ( "}" ) )
			)
		) ;
		
		/* advance pointer to start of next key */
		~! = If ( IsEmpty ( $~json.error ) and not ~endFound ;
			~jsonParseNext ( "," )
			& If ( IsEmpty ( $~json.error ) ;
				~jsonParseWhitespace
			)
		) ;
		
		~nextStep = If (
			not IsEmpty ( $~json.error )
				or ~endFound
			;
			2 ;	/* clean-up */
			1	/* main */
		)
	] ;
		~jsonParseObjectFindEnd ( ~nextStep )
	) ;
	
	
	/**
	 ***************************************************************************
	 * STEP 2: CLEAN-UP
	 ***************************************************************************
	 */
	step = 2 ;
	Let ( [
		~! = /* logging start disabled LogWriterMemoryCreateEntry (
			"~jsonParseObjectFindEnd [step:2]"
		) & disabled logging end */ "" ;
		
		/* no local variables to clean up */
		~! = ""
	] ;
		""
	)
)