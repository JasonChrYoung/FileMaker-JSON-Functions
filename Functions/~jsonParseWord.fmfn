/**
 * =====================================
 * ~jsonParseWord
 *
 * RETURNS:
 *		1 for true, 0 for false, "json:null" for null
 *		Error message on error.
 *
 * PARAMETERS:
 *		
 *
 * DEPENDENCIES:
 *		Pointer is expected to be at start of 
 *		Custom Functions:
 *			~jsonParseNext
 *
 * HISTORY:
 *		CREATED on 2015-MAR-31 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

/* logging start disabled LogWriterMemoryCreateEntry (
	"~jsonParseWord start"
) & disabled logging end */

Case (
	$~json.ch = "t" ;
	If ( Not IsEmpty ( ~jsonParseNext ( "t" ) )
		and Not IsEmpty ( ~jsonParseNext ( "r" ) )
		and Not IsEmpty ( ~jsonParseNext ( "u" ) )
		and Not IsEmpty ( ~jsonParseNext ( "e" ) )
		;
		True ;
		"Error: " & $~json.error
	) ;
	
	$~json.ch = "f" ;
	If ( Not IsEmpty ( ~jsonParseNext ( "f" ) )
		and Not IsEmpty ( ~jsonParseNext ( "a" ) )
		and Not IsEmpty ( ~jsonParseNext ( "l" ) )
		and Not IsEmpty ( ~jsonParseNext ( "s" ) )
		and Not IsEmpty ( ~jsonParseNext ( "e" ) )
		;
		False ;
		"Error: " & $~json.error
	) ;
	
	$~json.ch = "n" ;
	If ( Not IsEmpty ( ~jsonParseNext ( "n" ) )
		and Not IsEmpty ( ~jsonParseNext ( "u" ) )
		and Not IsEmpty ( ~jsonParseNext ( "l" ) )
		and Not IsEmpty ( ~jsonParseNext ( "l" ) )
		;
		"json:null" ;
		"Error: " & $~json.error
	) ;
	
	/* else */
	~jsonParseError ( "Unexpected " & Quote ( $~json.ch ) )
)