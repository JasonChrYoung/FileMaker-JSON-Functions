/**
 * =====================================
 * ~jsonParseArrayGetKeyList ( step )
 *
 * RETURNS:
 *		A list of top-level indexes in an array.
 *
 * PARAMETERS:
 *		step = always leave empty when calling this function
 *			(stores the current state of processing this recursive function is in)
 *
 * DEPENDENCIES:
 *		Pointer is expected to be at [ starting the array.
 *		Custom Functions:
 *			~jsonParseArrayGetKeyList		(self: it's recursive!)
 *			~jsonParseError
 *			~jsonParseNext
 *			~jsonParseWhitespace
 *			~jsonParseValueSkip
 *
 * NOTES:
 *
 * HISTORY:
 *		CREATED on 2015-APR-04 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

Case (
	/**
	 ***************************************************************************
	 * STEP 0: SET-UP
	 ***************************************************************************
	 */
	not step ;
	Let ( [
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayGetKeyList [step:0]"
		) & /* logging end */ "" ;
		
		/* initialize variable */
		$~jsonParseArrayGetKeyList.result = "" ;
		$~jsonParseArrayGetKeyList.i = -1 ;
		
		~! = If ( IsEmpty ( ~jsonParseNext ( "[" ) ) ;
			~jsonParseError ( "Pointer was not at start of an array" )
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		/* check if array is empty */
		~endFound = If ( IsEmpty ( $~json.error ) ;
			If ( $~json.ch = "]" ;
				not IsEmpty ( ~jsonParseNext ( "]" ) )
			)
		) ;
		
		~nextStep = If (
			not IsEmpty ( $~json.error )
				or ~endFound
			;
			2 ;	/* clean-up */
			1	/* main */
		)
	] ;
		~jsonParseArrayGetKeyList ( ~nextStep )
	) ;
	
	
	/**
	 ***************************************************************************
	 * STEP 1: MAIN
	 ***************************************************************************
	 */
	step = 1 ;
	Let ( [
		$~jsonParseArrayGetKeyList.i = $~jsonParseArrayGetKeyList.i + 1 ;
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayGetKeyList [step:1]"
				& " [i:" & $~jsonParseArrayGetKeyList.i & "]"
		) & /* logging end */ "" ;
		
		~key = If ( IsEmpty ( $~json.error ) ;
			$~jsonParseArrayGetKeyList.i
		) ;
		
		$~jsonParseArrayGetKeyList.result = If ( IsEmpty ( $~json.error ) ;
			List (
				$~jsonParseArrayGetKeyList.result ;
				~key
			)
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseValueSkip
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		/* check if at end of array */
		~endFound = If ( IsEmpty ( $~json.error ) ;
			If ( $~json.ch = "]" ;
				not IsEmpty ( ~jsonParseNext ( "]" ) )
			)
		) ;
		
		/* advance pointer to start of next key */
		~! = If ( IsEmpty ( $~json.error ) ;
			If ( not ~endFound ;
				~jsonParseNext ( "," )
				& If ( IsEmpty ( $~json.error ) ;
					~jsonParseWhitespace
				)
			)
		) ;
		
		~nextStep = If (
			not IsEmpty ( $~json.error )
				or ~endFound
			;
			2 ;	/* clean-up */
			1	/* main */
		)
	] ;
		~jsonParseArrayGetKeyList ( ~nextStep )
	) ;
	
	
	/**
	 ***************************************************************************
	 * STEP 2: CLEAN-UP
	 ***************************************************************************
	 */
	step = 2 ;
	Let ( [
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayGetKeyList [step:2]"
		) & /* logging end */ "" ;
		
		~result = $~jsonParseArrayGetKeyList.result ;
		
		/* clean up local variables */
		$~jsonParseArrayGetKeyList.result = ""
	] ;
		~result
	)
)