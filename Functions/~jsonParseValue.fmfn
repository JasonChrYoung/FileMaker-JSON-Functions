/**
 * =====================================
 * ~jsonParseValue
 *
 * PURPOSE:
 *		Extract the value at the current pointer's position.
 *
 * RETURNS:
 *		The extracted value. If the value is an object or array, return the raw json.
 *
 * PARAMETERS:
 *		
 *
 * DEPENDENCIES:
 *		Pointer is expected to be at the start of the value (or whitespace before it)
 *		z_jsonParseSupport2
 *		z_jsonParseSupport3
 *
 * HISTORY:
 *		CREATED on 2015-MAR-31 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

/* logging start disabled LogWriterMemoryCreateEntry (
	"~jsonParseValue start"
) & disabled logging end */

~jsonParseWhitespace
& Case (
	/* OBJECT */
	$~json.ch = "{" ;
	Let ( [
		/**
		 * Offset start by -1 because it is actually pointing at the first
		 * character after the opening bracket and I want to retrieve the entire
		 * value starting with the opening bracket.
		 */
		~start = $~json.at - 1 ;
		~! = z_jsonParseSupport2 ( 220 /* ParseObjectFindEnd */ ; "" ; "" ; "" ; "" ) ;
		~end =  $~json.at ;
		~object = If ( IsEmpty ( $~json.error ) ;
			Middle (
				$~json.text ;
				~start ;
				~end - ~start - 1
			)
		)
	] ;
		If ( IsEmpty ( $~json.error ) ;
			~object ;
			"Error: " & $~json.error
		)
	) ;
	
	/* ARRAY */
	$~json.ch = "[" ;
	Let ( [
		/**
		 * Offset start by -1 because it is actually pointing at the first
		 * character after the opening bracket and I want to retrieve the entire
		 * value starting with the opening bracket.
		 */
		~start = $~json.at - 1 ;
		~! = ~jsonParseArrayFindEnd ( "" ) ;
		~end =  $~json.at ;
		~array = If ( IsEmpty ( $~json.error ) ;
			Middle (
				$~json.text ;
				~start ;
				~end - ~start - 1
			)
		)
	] ;
		If ( IsEmpty ( $~json.error ) ;
			~array ;
			"Error: " & $~json.error
		)
	) ;
	
	$~json.ch = "\"" ;
	~jsonParseString ;
	
	$~json.ch = "-"
		or (
			$~json.ch ≥ 0
			and $~json.ch ≤ 9
		)
	;
	z_jsonParseSupport3 ( 320 /* ParseNumber */ ; "" ; "" ; "" ; "" ) ;
	
	/* else */
	~jsonParseWord
)