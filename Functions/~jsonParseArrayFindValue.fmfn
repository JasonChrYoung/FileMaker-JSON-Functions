/**
 * =====================================
 * ~jsonParseArrayFindValue ( index )
 *
 * PURPOSE:
 *		Move pointer to the start of the value for a specified index.
 *
 * RETURNS:
 *		Boolean True if value is found, False if it isn't or if Error.
 *
 * PARAMETERS:
 *		index = array index/location (0-based)
 *
 * DEPENDENCIES:
 *		The pointer is expected to be on the "[" in the array.
 *
 * HISTORY:
 *		CREATED on 2015-MAR-31 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

Case (
	/**
	 ***************************************************************************
	 * STEP 0: SET-UP
	 ***************************************************************************
	 */
	not $~jsonParseArrayFindValue.step ;
	Let ( [
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayFindValue start [step:0]"
		) & /* logging end */ "" ;
		
		/* initialize variables */
		$~jsonParseArrayFindValue.i = -1 ;

		~! = If ( IsEmpty ( ~jsonParseNext ( "[" ) ) ;
			~jsonParseError ( "Pointer was not at start of an array" )
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) ;
			~jsonParseWhitespace
		) ;
		
		/* check if array is empty */
		~endFound = If ( IsEmpty ( $~json.error ) ;
			If ( $~json.ch = "]" ;
				True
					& ~jsonDiscardResult ( ~jsonParseNext ( "]" ) )
			)
		) ;
		
		$~jsonParseArrayFindValue.result = Case (
			~endFound ;
			False ;
			
			/* index values start at 0, so anything lower is invalid */
			index < 0 ;
			False
		) ;
		$~jsonParseArrayFindValue.step = If (
			not IsEmpty ( $~json.error )
				or not IsEmpty ( $~jsonParseArrayFindValue.result )
			;
			2 ;
			1
		)
	] ;
		~jsonParseArrayFindValue ( index )
	) ;

	
	/**
	 ***************************************************************************
	 * STEP 1: MAIN
	 ***************************************************************************
	 */
	$~jsonParseArrayFindValue.step = 1 ;
	Let ( [
		$~jsonParseArrayFindValue.i = $~jsonParseArrayFindValue.i + 1 ;
		
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayFindValue start [step:1]"
				& " [index:" & index & "]"
				& " [i:" & $~jsonParseArrayFindValue.i & "]"
		) & /* logging end */ "" ;
		
		~valueFound = $~jsonParseArrayFindValue.i = index ;

		~! = If ( IsEmpty ( $~json.error ) and not ~valueFound ;
			~jsonParseValueSkip
		) ;
		
		~! = If ( IsEmpty ( $~json.error ) and not ~valueFound ;
			~jsonParseWhitespace
		) ;
		
		/* check if at end of array */
		~endFound = If ( IsEmpty ( $~json.error ) and not ~valueFound ;
			If ( $~json.ch = "]" ;
				True
					& ~jsonDiscardResult ( ~jsonParseNext ( "]" ) )
			)
		) ;

		/* advance pointer to start of next value*/
		~! = If ( IsEmpty ( $~json.error ) and not ~endFound and not ~valueFound ;
			~jsonParseNext ( "," )
			& If ( IsEmpty ( $~json.error ) ;
				~jsonParseWhitespace
			)
		) ;
		
		$~jsonParseArrayFindValue.result = Case (
			~valueFound ;
			True ;
			
			~endFound ;
			False
		) ;
		$~jsonParseArrayFindValue.step = If (
			not IsEmpty ( $~json.error )
				or not IsEmpty ( $~jsonParseArrayFindValue.result )
			;
			2 ;	/* clean-up */
			1	/* main */
		)
	] ;
		~jsonParseArrayFindValue ( index )
	) ;

	
	/**
	 ***************************************************************************
	 * STEP 2: CLEAN-UP
	 ***************************************************************************
	 */
	$~jsonParseArrayFindValue.step = 2 ;
	Let ( [
		~result = If ( IsEmpty ( $~json.error ) ;
			$~jsonParseArrayFindValue.result ;
			False
		) ;
		
		~! = /* logging start */ LogWriterMemoryCreateEntry (
			"~jsonParseArrayFindValue end [i:" & $~jsonParseArrayFindValue.i & "]"
				& " [index:" & index & "]"
				& " [result:" & ~result & "]"
		) & /* logging end */ "" ;

		// purge variables
		$~jsonParseArrayFindValue.step = "" ;
		$~jsonParseArrayFindValue.result = "" ;
		$~jsonParseArrayFindValue.i = ""
	] ;
		~result
	)
)