/**
 * =====================================
 * z_jsonParseSupport1 ( functionId ; req ; private ; res ; step )
 *
 * PURPOSE:
 *		Supporting code for native json parsing functions.
 *		high-level/supporting/control/dispatch
 *
 * PARAMETERS:
 *		functionId = numeric code for function to run, in range of 100 - 199
 *			100		ParseValue
 *			101		ParseValueSkip
 *			110		GetValuePosition
 *			120		GetEndPosition
 *			121		IsEmpty
 *			199		Error
 *		req = requested data (if any)
 *		private = private data, likely sent to recursive calls of a function
 *		res = response
 *		step = current state of a recursive function
 *
 * DEPENDENCIES:
 *		none
 *
 * HISTORY:
 *		CREATED on 2015-APR-10 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

/* logging start */
Let ( [
	uuid = Get ( UUID ) ;
	~! = LogWriterMemoryCreateEntry (
		"z_jsonParseSupport1"
			& " [functionId:" & functionId & "]"
			& " [uuid:" & uuid & "]"
			& " [req:" & req & "]"
			& " [private:" & private & "]"
			& " [res:" & res & "]"
			& " [step:" & step & "]"
	)
] ;
/* logging end */
Case (
	
	
	functionId = 100 /* ParseValue */
		or functionId = 101 /* ParseValueSkip */
	;
	/**
	 * =====================================================================
	 * ParseValue / ParseValueSkip
	 * 
	 * ParseValue: Extract the value at the current pointer's position.
	 * ParseValueSkip: Find the end of a value.
	 *
	 * parameters:
	 *		req = not used
	 *		private = not used
	 *
	 * returns:
	 *		ParseValue: The extracted value. If the value is an object or array, return the raw json.
	 *		ParseValueSkip: empty string
	 * =====================================================================
	 */
	Let ( [
		~! = If ( $~json.ch ≤ " " ;
			z_jsonParseSupport3 ( 300 /* ParseWhitespace */ ; "" ; "" ; "" ; "" )
		) ;
		~valueType = Case (
			$~json.ch = "{" ;	"o" ;
			$~json.ch = "[" ;	"a" ;
			$~json.ch = "\"" ;	"s" ;
			$~json.ch = "-" or ( $~json.ch ≥ 0 and $~json.ch ≤ 9 ) ;		"n" ;
			/* else: assume word */
			"w"
		)
	] ;
		/* TODO: don't return a result if ParseValueSkip */
		Case (
			~valueType = "o" or ~valueType = "a" ;
			Let ( [
				~start = $~json.at - 1 ;
				~! = If ( ~valueType = "o" ;
					z_jsonParseSupport2 ( 200 /* ParseObjectFindEnd */ ; "" ; "" ; "" ; "" ) ;
					z_jsonParseSupport2 ( 210 /* ParseArrayFindEnd */ ; "" ; "" ; "" ; "" )
				) ;
				~end =  $~json.at
			] ;
				/* TODO: don't extract the value if ParseValueSkip */
				If ( IsEmpty ( $json.error ) ;
					Middle (
						$~json.text ;
						~start ;
						~end - ~start - 1
					) ;
					"?"
				)
			) ;
			
			~valueType = "s" ;
			z_jsonParseSupport3 ( 310 /* ParseString */ ; "" ; "" ; "" ; "" ) ;
			
			~valueType = "n" ;
			z_jsonParseSupport3 ( 320 /* ParseNumber */ ; "" ; "" ; "" ; "" ) ;
			
			/* else */
			z_jsonParseSupport3 ( 330 /* ParseWord */ ; "" ; "" ; "" ; "" )
		)
	) ;
	
	
	
	functionId = 110 ;
	/**
	 * =====================================================================
	 * GetValuePosition
	 * 
	 * Find the starting position of a value.
	 *
	 * parameters:
	 *		req = json
	 *		private = keyOrIndex
	 *
	 * returns:
	 *		ParseValue: The extracted value. If the value is an object or array, return the raw json.
	 *		ParseValueSkip: empty string
	 * =====================================================================
	 */
	Let ( [
		/* initialize parsing variables */
		$~json.text = req ;
		$~json.ch = Left ( $~json.text ; 1 ) ;
		$~json.at = 2 ;
		$json.error = "" ;
		
		/**
		 * initialize cache
		 *
		 *	$json.config.cache.enabled		If true, cache will not be used.
		 *						Will automatically be set to true on FileMaker 12.
		 *
		 *	$json.config.cache.maxdepth			Maximum number of nested objects/arrays to cache.
		 *
		 *	$~json.depth		how many objects/arrays are above the current set of values
		 *						this is incremented for every new sub-object/array
		 *
		 *	$~json.cache.hash	ordered list of MD5 hashes of json objects/arrays
		 *
		 *	$~json.cache.data	ordered list of Quote()'ed cache data that corresponds with
		 *						the hash in the same position in it's list
		 *
		 *	$~json.cache[n]		temporary cache data for nth depth of the json in $~json.text,
		 *						which is currently being processed. Once an entire object/array
		 *						is cached, it is quoted and stored in $~json.cache.data.
		 *						
		 *						keyOrIndexName|keyStartPos|valueType|valueStartPos|valueEndPos|hash|lastAt¶
		 *								
		 *							keyOrIndexName		with CR, LF and | removed
		 *							keyStartPos			position of the first character of an object
		 *												property name. empty if an array
		 *							valueType			json data type abbreviation: a,o,s,n,w
		 *												I'm still not sure if I need this.
		 *							valueStartPos		position of the first character of the value
		 *							valueEndPos			position of the last character of the value
		 *							hash				if an object or array, the MD5 hash of it
		 *												used to find the cache for this object/array
		 *							lastAt				position of last parsed character
		 *							
		 *							all position values are an offset from the starting position of the
		 *							current object/array
		 *							
		 *							last value has these nuances:
		 *								- if the entire object/array is cached, will start with:
		 *									"|DONE|"
		 *									TODO: I think I'll want to add more information to this line, but I'm not sure what yet.
		 *									NOTE: starting with | prevents collision with an object name
		 *								- else: will contain data on the last parsed value
		 *									- if the value was not completely parsed, then the last
		 *									  value will not be complete, it will end with valueStartPos
		 *								
		 *
		 *	$~json.hash			hash of the json object that temporary cache is associated with
		 */
		$json.config.cache.enabled = If ( $json.config.cache.enabled = False ;
			False ;
			/* only enable cache if on version 13+ because it creates MD5 hashes via GetContainerAttribute function */
			GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13
		) ;
		~! = If ( $json.config.cache.enabled ;
			Let ( [
				$json.config.cache.maxdepth = If ( $json.config.cache.maxdepth ≥ 1 ;
					$json.config.cache.maxdepth ;
					10 /* hard-coded default max depth */
				) ;
				~hash = GetContainerAttribute ( $~json.text ; "MD5" ) ;
				~isNewJson = ~hash ≠ $~json.hash ; /* current json is different than last json accessed while caching was enabled */
				/* check if hash exists for previously accessed json */
				~hashPosition = If ( ~isNewJson ;
					Position ( $~json.cache.hash ; $~json.hash ; 1 ; 1 )
				) ;
				
				/* logging start */
				~! = LogWriterMemoryCreateEntry (
					"GetValuePosition: initialize cache: start"
					& " [functionId:" & functionId & "]"
					& " [uuid:" & uuid & "]"
					& " [req:" & req & "]"
					& " [private:" & private & "]"
					& " [res:" & res & "]"
					& " [step:" & step & "]"
					& " [~hash:" & ~hash & "]"
					& " [~isNewJson:" & ~isNewJson & "]"
					& " [~hashPosition:" & ~hashPosition & "]"
					& "¶[$~json.cache[1]:" & $~json.cache[1] & "]"
					& "¶[$~json.cache.hash:" & $~json.cache.hash & "]"
					& "¶[$~json.cache.data:" & $~json.cache.data & "]"
				) ; /* logging end */
				
				/* remove previous cache for the previously accessed json, so the temporary cache can be saved */
				~! = If ( ~hashPosition ;
					Let ( [
						~leftOfHash = Left ( $~json.cache.hash ; ~hashPosition - 1 ) ;
						$~json.cache.hash = List (
							Left ( ~leftOfHash ; Length ( ~leftOfHash ) - 1 ) ;
							Right (
								$~json.cache.hash ;
								Length ( $~json.cache.hash ) - Length ( $~json.hash ) - ~hashPosition
							)
						) ;
						
						~valueNumber = PatternCount ( ~leftOfHash ; ¶ ) + 1 ;
						~startOfData = Position ( $~json.cache.data ; ¶ ; 1 ; ~valueNumber - 1 ) + 1 ;
						~endOfData = Position ( $~json.cache.data & ¶ ; ¶ ; ~startOfData ; 1 ) ;
						$~json.cache.data = List (
							Left ( $~json.cache.data ; ~startOfData - 2 ) ;
							Right (
								$~json.cache.data ;
								Length ( $~json.cache.data ) - ~endOfData
							)
						)
						
						/* logging start */
						; ~! = LogWriterMemoryCreateEntry (
							"GetValuePosition: removed previous cache for previous json"
							& " [functionId:" & functionId & "]"
							& " [uuid:" & uuid & "]"
							& " [req:" & req & "]"
							& " [private:" & private & "]"
							& " [res:" & res & "]"
							& " [step:" & step & "]"
							& " [$~json.hash:" & $~json.hash & "]"
							& " [~hashPosition:" & ~hashPosition & "]"
							& " [~leftOfHash:" & ~leftOfHash & "]"
							& " [~valueNumber:" & ~valueNumber & "]"
							& " [~startOfData:" & ~startOfData & "]"
							& " [~endOfData:" & ~endOfData & "]"
							& "¶[$~json.cache.hash:" & $~json.cache.hash & "]"
							& "¶[$~json.cache.data:" & $~json.cache.data & "]"
						) /* logging end */
					] ; "" )
				) ;

				/* save the temporary cache to main storage */
				~! = If ( ~isNewJson and not IsEmpty ( $~json.cache[1] ) ;
					Let ( [
						$~json.cache.hash = List ( $~json.cache.hash ; $~json.hash ) ;
						$~json.cache.data = List ( $~json.cache.data ; Quote ( $~json.cache[1] ) )
						/* logging start */
						; ~! = LogWriterMemoryCreateEntry (
							"GetValuePosition: saved temporary cache from previous json"
							& " [functionId:" & functionId & "]"
							& " [uuid:" & uuid & "]"
							& " [req:" & req & "]"
							& " [private:" & private & "]"
							& " [res:" & res & "]"
							& " [step:" & step & "]"
							& " [$~json.hash:" & $~json.hash & "]"
							& " [~hashPosition:" & ~hashPosition & "]"
							& "¶[$~json.cache.hash:" & $~json.cache.hash & "]"
							& "¶[$~json.cache.data:" & $~json.cache.data & "]"
						) /* logging end */
					] ; "" )
				) ;
				
				/* clear temporary cache */
				~! = Let ( [
					/* delete all $~json.cache[n] variables, up to $json.config.cache.maxdepth. */
					/* TODO: This method is temporary: do it properly
						possibly use a method like this to generate code as text, then evaluate it: http://www.briandunning.com/cf/942. I like this idea because I don't want to recurse to complete this task.
					*/
					$~json.cache[1] = "" ;
					$~json.cache[2] = "" ;
					$~json.cache[3] = "" ;
					$~json.cache[4] = "" ;
					$~json.cache[5] = "" ;
					$~json.cache[6] = "" ;
					$~json.cache[7] = "" ;
					$~json.cache[8] = "" ;
					$~json.cache[9] = "" ;
					$~json.cache[10] = ""
				] ; "" ) ;
				
				/* now that temporary cache has been saved, modify $~json.hash to hold the value for the current json */
				$~json.hash = ~hash ;

				/* does cache exists for current json? */
				~hashPosition = If ( ~isNewJson ;
					Position ( $~json.cache.hash ; $~json.hash ; 1 ; 1 )
				) ;

				/* Load saved cache into temporary cache. */
				$~json.cache[1] = If ( ~hashPosition ;
					Let ( [
						~leftOfHash = Left ( $~json.cache.hash ; ~hashPosition - 1 ) ;
						~valueNumber = PatternCount ( ~leftOfHash ; ¶ ) + 1 ;
						~data = GetValue ( $~json.cache.data ; ~valueNumber )
						/* logging start */
						; ~! = LogWriterMemoryCreateEntry (
							"GetValuePosition: load saved cache to temp cache"
							& " [functionId:" & functionId & "]"
							& " [uuid:" & uuid & "]"
							& " [req:" & req & "]"
							& " [private:" & private & "]"
							& " [res:" & res & "]"
							& " [step:" & step & "]"
							& " [$~json.hash:" & $~json.hash & "]"
							& " [~hashPosition:" & ~hashPosition & "]"
							& " [~leftOfHash:" & ~leftOfHash & "]"
							& " [~valueNumber:" & ~valueNumber & "]"
							& " [~data:" & ~data & "]"
						) /* logging end */
					] ;
						Evaluate ( ~data )
					) ;
					/* else: use the data already in temporary cache */
					$~json.cache[1]
				) ;
				
				/* object/array walking functions increment/decrement this value on every iteration, so setting it to 0 here causes it to start at 1 on the first value */
				$~json.depth = 0
				/* logging start */
				; ~! = LogWriterMemoryCreateEntry (
					"GetValuePosition: initialize cache: end"
					& " [functionId:" & functionId & "]"
					& " [uuid:" & uuid & "]"
					& " [req:" & req & "]"
					& " [private:" & private & "]"
					& " [res:" & res & "]"
					& " [step:" & step & "]"
					& " [$~json.hash:" & $~json.hash & "]"
					& "¶[$~json.cache[1]:" & $~json.cache[1] & "]"
					& "¶[$~json.cache.hash:" & $~json.cache.hash & "]"
					& "¶[$~json.cache.data:" & $~json.cache.data & "]"
				) /* logging end */
			] ; "" )
		) ;
		~! = If ( $~json.ch ≤ " " ;
			z_jsonParseSupport3 ( 300 /* ParseWhitespace */ ; "" ; "" ; "" ; "" )
		)
	] ;
		Case (
			/* object */
			$~json.ch = "{" ;
			z_jsonParseSupport2 ( 201 /* ParseObjectFindValue */ ; private ; "" ; "" ; "" ) ;
			
			/* array */
			$~json.ch = "[" ;
			z_jsonParseSupport2 ( 211 /* ParseArrayFindValue */ ; private ; "" ; "" ; "" ) ;
			
			/* else: string, number, or word */
			False
				& z_jsonParseSupport1 ( 199 /* Error */ ;
					"value sent to GetValuePosition function was not an object or array" ; "" ; "" ; ""
				)
		)
		
		/* clean-up parsing variables */
		& Let ( [
			$~json.text = "" ;
			$~json.ch = "" ;
			$~json.at = "" ;
			$~json.depth = ""
			/* logging start */
			; ~! = LogWriterMemoryCreateEntry (
				"GetValuePosition: end"
				& " [functionId:" & functionId & "]"
				& " [uuid:" & uuid & "]"
				& " [req:" & req & "]"
				& " [private:" & private & "]"
				& " [res:" & res & "]"
				& " [step:" & step & "]"
				& "¶[$~json.cache[1]:" & $~json.cache[1] & "]"
				& "¶[$~json.cache.hash:" & $~json.cache.hash & "]"
				& "¶[$~json.cache.data:" & $~json.cache.data & "]"
			) /* logging end */
		] ;
			""
		)
	) ;
	
	
	
	functionId = 120 ;
	/**
	 * =====================================================================
	 * GetEndPosition
	 * 
	 * returns:
	 * 		Position of last non-whitespace character in the json.
	 *
	 * parameters:
	 *		req = json
	 *		private = current character
	 *		res = current position
	 *
	 * notes:
	 * 		Accesses the json from a reserved variable, but could potentially
	 *		be modified to access it from the req parameter.
	 * =====================================================================
	 */
	Let ( [
		/* initialize parsing variables on first iteration */
		~ch = If ( not step ;
			" " ;
			private
		) ;
		~at = If ( not step ;
			Length ( req ) ;
			res
		) ;
		
		~ch = Middle ( req ; ~at ; 1 ) ;
		~at = ~at - 1 ;
		~endFound =
			~ch = "}"
			or ~ch = "]"
	] ;
		If ( ~endFound ;
			~at + 1 ;
			z_jsonParseSupport1 ( 120 /* GetEndPosition */ ; req ; ~ch ; ~at ; 1 )
		)
	) ;
	
	
	
	functionId = 121 ;
	/**
	 * =====================================================================
	 * IsEmpty
	 * 
	 * Determine if the json is empty: {} or [] (potentially with whitespace)
	 *
	 * parameters:
	 *		req = json
	 *		private = not used
	 *
	 * returns:
	 *		Boolean True if json is an empty object or array, False if it isn't.
	 * =====================================================================
	 */
	Let ( [
		/* initialize parsing variables */
		$~json.text = req ;
		$~json.ch = Left ( $~json.text ; 1 ) ;
		$~json.at = 2 ;
		
		~! = If ( $~json.ch ≤ " " ;
			z_jsonParseSupport3 ( 300 /* ParseWhitespace */ ; "" ; "" ; "" ; "" )
		) ;
		
		~! = If ( $~json.ch ≠ "{" and $~json.ch ≠ "[" ;
			z_jsonParseSupport1 ( 199 /* Error */ ;
				"json was not an object or array as expected. Occurred in IsEmpty function." ; "" ; "" ; ""
			)
		) ;
		
		/* function:next_no_result */
		$~json.ch = Middle ( $~json.text ; $~json.at ; 1 ) ;
		$~json.at = $~json.at + 1 ;
		
		~! = If ( $~json.ch ≤ " " ;
			z_jsonParseSupport3 ( 300 /* ParseWhitespace */ ; "" ; "" ; "" ; "" )
		) ;
		
		~ch = $~json.ch ;
		
		/* clean-up parsing variables */
		$~json.text = "" ;
		$~json.ch = "" ;
		$~json.at = "" ;
		$~json.depth = ""
	] ;
		If ( IsEmpty ( $json.error ) ;
			~ch = "}" or ~ch = "]"
		)
	) ;
	
	
	
	functionId = 199 ;
	/**
	 * =====================================================================
	 * Error
	 *
	 * parameters:
	 *		req = error message
	 * =====================================================================
	 */
	Let ( [
		/* *
		 * am not using a standard logging start/end comment because error
		 * logging should always be enabled
		 */
		message = req ;
		~! = LogWriterMemoryCreateEntry (
			"Error"
				& " [message:" & message & "]"
		) ;
		/* save the error */
		$json.error = List (
			message
				& If ( $~json.at > 0 ;
					" [ch:" & $~json.ch & "]"
					& " [at:" & $~json.at & "]"
					& " [context:"
						& Middle ( $~json.text ; $~json.at - 11 ; 20 )
						& "]"
				)
			;
			$json.error
		) ;
		/* trigger parent functions to abort */
		$~json.ch = "" ;
		$~json.at = -1
	] ;
		/**
		 * Don't return anything because calling function can always access
		 * the error from $json.error, and many calling functions don't
		 * need to access the error.
		 */
		""
	) ;
	
	
	/**
	 * =====================================================================
	 * ELSE: FUNCTION NOT FOUND
	 * =====================================================================
	 */
	z_jsonParseSupport1 ( 199 /* Error */ ;
		"FunctionId [" & functionId & "]does not exist" ; "" ; "" ; ""
	)
)

/* logging start */
)
/* logging end */