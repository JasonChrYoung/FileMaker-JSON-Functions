/**
 * =====================================
 * jsonGet ( json ; keyOrIndex )
 *
 * RETURNS:
 *		The value specified by keyOrIndex if it exists, otherwise return "json:notFound".
 *		If json value is null, will return "json:null"
 *		true/false will be returned as the FileMaker equivalent 1/0.
 *
 * PARAMETERS:
 *		json = the json string
 *		keyOrIndex = object property key (name) or array index (position)
 *
 * DEPENDENCIES:
 *		
 *
 * NOTES:
 *
 * HISTORY:
 *		CREATED on 2015-MAR-31 by Daniel Smith dansmith65@gmail.com
 *
 * =====================================
 */

Let ( [
	~cache = z_jsonParseSupport1 ( 110 /* GetValuePosition */ ; json ; keyOrIndex ; "" ; "" )
] ;
	Case (
		not IsEmpty ( $json.error ) ;
		"?" ;
		
		/**
		 * value was found
		 */
		~cache ;
		Let ( [
			~cacheAsList = Substitute ( ~cache ; "|" ; ¶ ) ;
			~valStartPos = GetValue ( ~cacheAsList ; 4 ) ;
			~valEndPos = GetValue ( ~cacheAsList ; 5 ) ;
			$~json.text = Middle ( json ; ~valStartPos ; ~valEndPos - ~valStartPos + 1 ) ;
			$~json.ch = Left ( $~json.text ; 1 ) ;
			$~json.at = 2 ;
			~result = Case (
				$~json.ch = "{" or $~json.ch = "[" ;
				$~json.text ;
				
				$~json.ch = "\"" ;
				z_jsonParseSupport3 ( 310 /* ParseString */ ; "" ; "" ; "" ; "" ) ;
				
				$~json.ch = "-"
					or (
						$~json.ch ≥ 0
						and $~json.ch ≤ 9
					)
				;
				GetAsNumber ( $~json.text ) ;
				
				/* else */
				z_jsonParseSupport3 ( 330 /* ParseWord */ ; "" ; "" ; "" ; "" )
			) ;
			
			/* clean-up parsing variables */
			$~json.text = "" ;
			$~json.ch = "" ;
			$~json.at = "" ;
			$~json.depth = ""
		] ;
			~result
		) ;
		
		/**
		 * else: value was NOT found
		 */
		""
	)
)